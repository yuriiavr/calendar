// === –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===

const monthView = document.getElementById('monthView'); // –ú—ñ—Å—è—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
const dayView = document.getElementById('dayView'); // –†–æ–∑–∫–ª–∞–¥ –¥–Ω—è
const monthCalendar = document.getElementById('monthCalendar'); // –¢–∞–±–ª–∏—Ü—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
const daySchedule = document.getElementById('daySchedule').querySelector('tbody'); // –†–æ–∑–∫–ª–∞–¥ –¥–Ω—è
const backToMonthButton = document.getElementById('backToMonth'); // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—è—Ü—è"
const prevMonthButton = document.getElementById('prevMonth'); // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å"
const nextMonthButton = document.getElementById('nextMonth'); // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å"
const currentMonthLabel = document.getElementById('currentMonth'); // –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
const modal = document.getElementById('eventModal'); // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
const saveEventButton = document.getElementById('saveEvent'); // –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–¥—ñ—é"
const cancelEventButton = document.getElementById('cancelEvent'); // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é"
const eventDescriptionInput = document.getElementById('eventDescription'); // –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –ø–æ–¥—ñ—ó
const eventTypeSelect = document.getElementById('eventType'); // –í–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó
const today = new Date();
const events = {
    plans: {},
    holidays: {}
};
let selectedDate = null; // –í–∏–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
let currentMonth = new Date(today.getFullYear(), today.getMonth()); // –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
let isDayModeEnabled = JSON.parse(localStorage.getItem('dayMode')) || false; // –°—Ç–∞–Ω –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
const contextMenu = document.getElementById('contextMenu'); // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
let selectedEventCell = null; // –ü–æ—Ç–æ—á–Ω–∞ –æ–±—Ä–∞–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ–¥—ñ—ó
let userTimezone = localStorage.getItem('userTimezone') || Intl.DateTimeFormat().resolvedOptions().timeZone;

// === –ú–Ü–°–Ø–ß–ù–ò–ô –ö–ê–õ–ï–ù–î–ê–† ===

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createMonthCalendar() {
    const tbody = monthCalendar.querySelector('tbody');
    tbody.innerHTML = '';

    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
    const firstWeekday = firstDayOfMonth.getDay() === 0 ? 7 : firstDayOfMonth.getDay();
    const totalDays = lastDayOfMonth.getDate();

    currentMonthLabel.textContent = firstDayOfMonth.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });

    let dayCounter = 1;
    let row = document.createElement('tr');

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–Ω—ñ–≤
    for (let i = 1; i < firstWeekday; i++) {
        const emptyCell = document.createElement('td');
        row.appendChild(emptyCell);
    }

    // –î–æ–¥–∞—î–º–æ –¥–Ω—ñ –º—ñ—Å—è—Ü—è
    for (let i = firstWeekday; i <= 7; i++) {
        const cell = createMonthCell(dayCounter++);
        row.appendChild(cell);
    }

    tbody.appendChild(row);

    // –î–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É –¥–Ω—ñ–≤ –º—ñ—Å—è—Ü—è
    while (dayCounter <= totalDays) {
        row = document.createElement('tr');
        for (let i = 1; i <= 7 && dayCounter <= totalDays; i++) {
            const cell = createMonthCell(dayCounter++);
            row.appendChild(cell);
        }
        tbody.appendChild(row);
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–Ω—è
function createMonthCell(day) {
    const cell = document.createElement('td');
    cell.textContent = day;

    const cellDate = getDateInTimezone(new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day), userTimezone);
    const today = getDateInTimezone(new Date(), userTimezone);

    // –ü—ñ–¥—Å–≤—ñ—á–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –¥–∞—Ç–∏
    if (
        cellDate.getFullYear() === today.getFullYear() &&
        cellDate.getMonth() === today.getMonth() &&
        cellDate.getDate() === today.getDate()
    ) {
        cell.style.backgroundColor = 'green';
        cell.style.color = 'white';
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–≤—è—Ç
    const isoDate = `${cellDate.getFullYear()}-${String(cellDate.getMonth() + 1).padStart(2, '0')}-${String(cellDate.getDate()).padStart(2, '0')}`;
    if (events.holidays[isoDate]) {
        const holidayDiv = document.createElement('div');
        holidayDiv.textContent = `üéâ ${events.holidays[isoDate].join(', ')}`;
        holidayDiv.style.fontSize = '12px';
        holidayDiv.style.color = 'red';
        cell.appendChild(holidayDiv);
    }

    // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
    cell.addEventListener('click', () => showDayView(isoDate));
    return cell;
}


// === –ö–ï–†–£–í–ê–ù–ù–Ø –ú–Ü–°–Ø–¶–ï–ú ===

// –ü–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è –Ω–∞–∑–∞–¥
function prevMonth() {
    currentMonth.setMonth(currentMonth.getMonth() - 1);
    createMonthCalendar();
}

// –ü–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è –≤–ø–µ—Ä–µ–¥
function nextMonth() {
    currentMonth.setMonth(currentMonth.getMonth() + 1);
    createMonthCalendar();
}

// === –î–ï–¢–ê–õ–¨–ù–ò–ô –†–û–ó–ö–õ–ê–î –î–ù–Ø ===

// –ü–æ–∫–∞–∑ —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
function showDayView(date) {
    selectedDate = date;
    monthView.style.display = 'none';
    dayView.style.display = 'block';
    document.getElementById('selectedDate').textContent = new Date(date).toLocaleDateString('uk-UA', { day: 'numeric', month: 'long', year: 'numeric' });
    createDaySchedule(date);
    scrollToCurrentTime();
}

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
backToMonthButton.addEventListener('click', () => {
    dayView.style.display = 'none';
    monthView.style.display = 'block';
    selectedDate = null;
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
function createDaySchedule(date) {
    daySchedule.innerHTML = '';

    for (let hour = 0; hour < 24; hour++) {
        for (let minutes = 0; minutes < 60; minutes += 30) {
            const row = document.createElement('tr');
            const timeCell = document.createElement('td');
            timeCell.textContent = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            timeCell.classList.add('time-label');

            const eventCell = document.createElement('td');
            eventCell.dataset.date = date;
            eventCell.dataset.time = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            eventCell.addEventListener('dblclick', () => addEventByClick(eventCell));
            eventCell.addEventListener('contextmenu', (e) => openContextMenu(e, eventCell));
            document.addEventListener('click', (e) => {
                if (modal.style.display === 'block' && !modal.contains(e.target) && e.target !== saveEventButton && e.target !== cancelEventButton) {
                    closeEventModal();
                }
            });

            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤
            if (events.plans[date] && events.plans[date][eventCell.dataset.time]) {
                events.plans[date][eventCell.dataset.time].forEach(event => {
                    const span = document.createElement('span');
                    span.textContent = event;
                    span.style.display = 'block';
                    eventCell.appendChild(span);
                });
            }

            row.appendChild(timeCell);
            row.appendChild(eventCell);
            daySchedule.appendChild(row);
        }
    }

    applyDayMode(isDayModeEnabled);
    highlightCurrentTime();
}

// === –ú–û–î–ê–õ–¨–ù–ï –í–Ü–ö–ù–û –î–õ–Ø –ü–û–î–Ü–ô ===

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function openEventModal(cell, isEdit = false) {
    modal.style.display = 'block';

    const { date, time } = cell.dataset;

    if (isEdit) {
        const existingEvent = events.plans[date]?.[time]?.[0] || '';
        eventDescriptionInput.value = existingEvent; // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª–µ –æ–ø–∏—Å—É —ñ—Å–Ω—É—é—á–æ—é –ø–æ–¥—ñ—î—é
        eventTypeSelect.value = 'plans';
    } else {
        eventDescriptionInput.value = ''; // –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó
        eventTypeSelect.value = 'plans';
    }

    saveEventButton.onclick = () => {
        const description = eventDescriptionInput.value.trim();
        const type = eventTypeSelect.value; // –¢–∏–ø –ø–æ–¥—ñ—ó ("plans" –∞–±–æ "holidays")

        if (description) {
            if (isEdit) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É –ø–æ–¥—ñ—é
                events.plans[date][time] = [description];
            } else {
                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–æ–¥—ñ—é
                addEvent(date, time, description, type);
            }
        }
        closeEventModal();
    };

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal.style.display === 'block') {
            closeEventModal();
        }
    });

    cancelEventButton.onclick = closeEventModal;
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function closeEventModal() {
    modal.style.display = 'none';
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ –∫–ª—ñ—Ç–∏–Ω–∫—É
function addEventByClick(cell) {
    openEventModal(cell);
}

// === –ö–û–ù–¢–ï–ö–°–¢–ù–ï –ú–ï–ù–Æ ===

function openContextMenu(event, cell) {
    event.preventDefault(); // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
    selectedEventCell = cell; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É

    contextMenu.style.display = 'block';
    contextMenu.style.left = `${event.pageX}px`;
    contextMenu.style.top = `${event.pageY}px`;
}


function closeContextMenu() {
    contextMenu.style.display = 'none';
    selectedEventCell = null;
}


document.addEventListener('click', (e) => {
    if (!contextMenu.contains(e.target)) {
        closeContextMenu();
    }
});


// === –î–ï–ù–ù–ò–ô –†–ï–ñ–ò–ú ===

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
function applyDayMode(enabled) {
    const rows = daySchedule.querySelectorAll('tr');
    rows.forEach(row => {
        const time = row.firstChild.textContent;
        const [hour] = time.split(':').map(Number);
        if (enabled) {
            row.style.display = (hour >= 8 && hour < 22) ? '' : 'none';
        } else {
            row.style.display = '';
        }
    });
}

const dayModeToggle = document.getElementById('dayModeToggle');
dayModeToggle.addEventListener('change', (e) => {
    isDayModeEnabled = e.target.checked;
    localStorage.setItem('dayMode', JSON.stringify(isDayModeEnabled)); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —É localStorage
    applyDayMode(isDayModeEnabled); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–µ–Ω–Ω–∏–π —Ä–µ–∂–∏–º
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
const savedDayMode = JSON.parse(localStorage.getItem('dayMode')) || false;
dayModeToggle.checked = savedDayMode; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
applyDayMode(savedDayMode); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∞–Ω –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É

// === –ü–†–û–ö–†–£–¢–ö–ê –î–û –ü–û–¢–û–ß–ù–û–ì–û –ß–ê–°–£ ===

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É
function scrollToCurrentTime() {
    const now = new Date();
    const currentCell = document.querySelector(`td[data-date="${now.toISOString().slice(0, 10)}"][data-time="${String(now.getHours()).padStart(2, '0')}:${now.getMinutes() < 30 ? '00' : '30'}"]`);
    if (currentCell) {
        currentCell.scrollIntoView({ behavior: 'smooth', block: 'center' });
        currentCell.style.backgroundColor = 'yellow';
    }
}

// === –î–û–î–ê–í–ê–ù–ù–Ø –ü–û–î–Ü–ô ===

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
function addEvent(date, time, description, type = 'plans') {
    if (type === 'plans') {
        if (!events.plans[date]) events.plans[date] = {};
        if (!events.plans[date][time]) events.plans[date][time] = [];
        events.plans[date][time].push(description);
    } else if (type === 'holidays') {
        if (!events.holidays[date]) events.holidays[date] = [];
        events.holidays[date].push(description);
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä –∞–±–æ —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è
    if (selectedDate === date) {
        createDaySchedule(date); // –û–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
    }
    
    createMonthCalendar(); // –û–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
document.getElementById('editEvent').addEventListener('click', () => {
    if (selectedEventCell) {
        openEventModal(selectedEventCell, true); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        closeContextMenu();
    }
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
document.getElementById('deleteEvent').addEventListener('click', () => {
    if (selectedEventCell) {
        const { date, time } = selectedEventCell.dataset;
        delete events.plans[date][time]; // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é
        if (Object.keys(events.plans[date]).length === 0) delete events.plans[date]; // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞—Ç—É, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—è
        createMonthCalendar(); // –û–Ω–æ–≤–ª—é—î–º–æ –º—ñ—Å—è—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
        if (selectedDate === date) createDaySchedule(date); // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è
        closeContextMenu();
    }
});


// –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–¥—ñ—ó
function highlightCurrentTime() {
    const now = getDateInTimezone(new Date(), userTimezone);
    const currentDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
    const currentTime = `${String(now.getHours()).padStart(2, '0')}:${now.getMinutes() < 30 ? '00' : '30'}`;
    const currentCell = document.querySelector(`td[data-date="${currentDate}"][data-time="${currentTime}"]`);

    if (currentCell) {
        currentCell.style.backgroundColor = 'yellow';
    }
}


function getDateInTimezone(date, timezone) {
    return new Date(
        new Date(date).toLocaleString('en-US', { timeZone: timezone })
    );
}

function loadTimezones() {
    const timezoneSelector = document.getElementById('timezoneSelector');
    const timezones = Intl.supportedValuesOf('timeZone'); // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —á–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏
    
    timezones.forEach(tz => {
        const option = document.createElement('option');
        option.value = tz;
        option.textContent = tz;
        if (tz === userTimezone) option.selected = true;
        timezoneSelector.appendChild(option);
    });

    timezoneSelector.addEventListener('change', (e) => {
        userTimezone = e.target.value;
        localStorage.setItem('userTimezone', userTimezone); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        createMonthCalendar(); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
    });
}



// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

prevMonthButton.addEventListener('click', prevMonth);
nextMonthButton.addEventListener('click', nextMonth);
loadTimezones();
createMonthCalendar();
scrollToCurrentTime();
