// === –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===

const monthView = document.getElementById('monthView'); // –ú—ñ—Å—è—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
const dayView = document.getElementById('dayView'); // –†–æ–∑–∫–ª–∞–¥ –¥–Ω—è
const monthCalendar = document.getElementById('monthCalendar'); // –¢–∞–±–ª–∏—Ü—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
const daySchedule = document.getElementById('daySchedule').querySelector('tbody'); // –†–æ–∑–∫–ª–∞–¥ –¥–Ω—è
const backToMonthButton = document.getElementById('backToMonth'); // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –º—ñ—Å—è—Ü—è"
const prevMonthButton = document.getElementById('prevMonth'); // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å"
const nextMonthButton = document.getElementById('nextMonth'); // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å"
const currentMonthLabel = document.getElementById('currentMonth'); // –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
const modal = document.getElementById('eventModal'); // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
const saveEventButton = document.getElementById('saveEvent'); // –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–¥—ñ—é"
const cancelEventButton = document.getElementById('cancelEvent'); // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é"
const eventDescriptionInput = document.getElementById('eventDescription'); // –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –ø–æ–¥—ñ—ó
const eventTypeSelect = document.getElementById('eventType'); // –í–∏–±—ñ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó
const today = new Date();
const events = {
    plans: {},
    holidays: {}
};
let selectedDate = null; // –í–∏–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
let currentMonth = new Date(today.getFullYear(), today.getMonth()); // –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
let isDayModeEnabled = JSON.parse(localStorage.getItem('dayMode')) || false; // –°—Ç–∞–Ω –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
const contextMenu = document.getElementById('contextMenu'); // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
let selectedEventCell = null; // –ü–æ—Ç–æ—á–Ω–∞ –æ–±—Ä–∞–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ–¥—ñ—ó
let userTimezone = localStorage.getItem('userTimezone') || Intl.DateTimeFormat().resolvedOptions().timeZone;
const eventTitleInput = document.getElementById('eventTitle'); // –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–¥—ñ—ó
let draggedEvent = null;


// === –ú–Ü–°–Ø–ß–ù–ò–ô –ö–ê–õ–ï–ù–î–ê–† ===

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createMonthCalendar() {
    const tbody = monthCalendar.querySelector('tbody');
    tbody.innerHTML = '';

    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
    const firstWeekday = firstDayOfMonth.getDay() === 0 ? 7 : firstDayOfMonth.getDay();
    const totalDays = lastDayOfMonth.getDate();

    currentMonthLabel.textContent = firstDayOfMonth.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });

    let dayCounter = 1;
    let row = document.createElement('tr');

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–Ω—ñ–≤
    for (let i = 1; i < firstWeekday; i++) {
        const emptyCell = document.createElement('td');
        row.appendChild(emptyCell);
    }

    // –î–æ–¥–∞—î–º–æ –¥–Ω—ñ –º—ñ—Å—è—Ü—è
    for (let i = firstWeekday; i <= 7; i++) {
        const cell = createMonthCell(dayCounter++);
        row.appendChild(cell);
    }

    tbody.appendChild(row);

    // –î–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É –¥–Ω—ñ–≤ –º—ñ—Å—è—Ü—è
    while (dayCounter <= totalDays) {
        row = document.createElement('tr');
        for (let i = 1; i <= 7 && dayCounter <= totalDays; i++) {
            const cell = createMonthCell(dayCounter++);
            row.appendChild(cell);
        }
        tbody.appendChild(row);
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–Ω—è
function createMonthCell(day) {
    const cell = document.createElement('td');
    cell.textContent = day;

    const cellDate = getDateInTimezone(new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day), userTimezone);
    const today = getDateInTimezone(new Date(), userTimezone);

    // –ü—ñ–¥—Å–≤—ñ—á–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –¥–∞—Ç–∏
    if (
        cellDate.getFullYear() === today.getFullYear() &&
        cellDate.getMonth() === today.getMonth() &&
        cellDate.getDate() === today.getDate()
    ) {
        cell.style.backgroundColor = 'green';
        cell.style.color = 'white';
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–≤—è—Ç
    const isoDate = `${cellDate.getFullYear()}-${String(cellDate.getMonth() + 1).padStart(2, '0')}-${String(cellDate.getDate()).padStart(2, '0')}`;
    if (events.holidays[isoDate]) {
        const holidayDiv = document.createElement('div');
        holidayDiv.textContent = `üéâ ${events.holidays[isoDate].join(', ')}`;
        holidayDiv.style.fontSize = '12px';
        holidayDiv.style.color = 'red';
        cell.appendChild(holidayDiv);
    }

    // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
    cell.addEventListener('click', () => showWeekView(isoDate));
    return cell;
}


// === –ö–ï–†–£–í–ê–ù–ù–Ø –ú–Ü–°–Ø–¶–ï–ú ===

// –ü–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è –Ω–∞–∑–∞–¥
function prevMonth() {
    currentMonth.setMonth(currentMonth.getMonth() - 1);
    createMonthCalendar();
}

// –ü–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è –≤–ø–µ—Ä–µ–¥
function nextMonth() {
    currentMonth.setMonth(currentMonth.getMonth() + 1);
    createMonthCalendar();
}

// === –î–ï–¢–ê–õ–¨–ù–ò–ô –†–û–ó–ö–õ–ê–î –î–ù–Ø ===

// –ü–æ–∫–∞–∑ —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è —Ç–∏–∂–Ω—è
function showWeekView(date) {
    selectedDate = date;

    const startDate = new Date(date);
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6); // –ö—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è —á–µ—Ä–µ–∑ 6 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏

    monthView.style.display = 'none';
    dayView.style.display = 'block';

    document.getElementById('selectedDate').textContent = `–¢–∏–∂–¥–µ–Ω—å: ${startDate.toLocaleDateString('uk-UA', { day: 'numeric', month: 'long' })} - ${endDate.toLocaleDateString('uk-UA', { day: 'numeric', month: 'long' })}`;
    createWeekSchedule(startDate);
}


function createWeekSchedule(startDate) {
    daySchedule.innerHTML = '';

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
    const thead = document.querySelector('#daySchedule thead tr');
    thead.innerHTML = '<th class="time-label">–ß–∞—Å</th>'; // –û—á–∏—â—É—î–º–æ —ñ –¥–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —á–∞—Å—É

    const weekDates = [];
    for (let dayOffset = 0; dayOffset < 7; dayOffset++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + dayOffset);

        weekDates.push(currentDate);

        const th = document.createElement('th');
        th.textContent = currentDate.toLocaleDateString('uk-UA', { weekday: 'short', day: 'numeric', month: 'short' });
        th.dataset.date = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;

        if (currentDate.toDateString() === new Date().toDateString()) {
            th.classList.add('today');
        }

        thead.appendChild(th);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–ª—è —á–∞—Å—É
    for (let hour = 0; hour < 24; hour++) {
        for (let minutes = 0; minutes < 60; minutes += 30) {
            const row = document.createElement('tr');

            const timeCell = document.createElement('td');
            timeCell.textContent = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            timeCell.classList.add('time-label');
            row.appendChild(timeCell);

            weekDates.forEach(currentDate => {
                const eventCell = document.createElement('td');
                const isoDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;
                eventCell.dataset.date = isoDate;
                eventCell.dataset.time = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
                eventCell.setAttribute('draggable', 'true'); // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
                eventCell.addEventListener('dragstart', (e) => handleDragStart(e, eventCell));
                eventCell.addEventListener('dragover', handleDragOver);
                eventCell.addEventListener('drop', (e) => handleDrop(e, eventCell));
                eventCell.addEventListener('dblclick', () => addEventByClick(eventCell));

                // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π
                if (events.plans[isoDate] && events.plans[isoDate][eventCell.dataset.time]) {
                    events.plans[isoDate][eventCell.dataset.time].forEach(event => {
                        const span = document.createElement('span');
                        span.textContent = event.title;
                        span.style.fontWeight = 'bold';

                        eventCell.appendChild(span);
                    });
                }

                row.appendChild(eventCell);
            });

            daySchedule.appendChild(row);
        }
    }

    applyDayMode(isDayModeEnabled);
    highlightCurrentTime();
}


// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
backToMonthButton.addEventListener('click', () => {
    dayView.style.display = 'none';
    monthView.style.display = 'block';
    selectedDate = null;
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
function createDaySchedule(date) {
    daySchedule.innerHTML = '';

    for (let hour = 0; hour < 24; hour++) {
        for (let minutes = 0; minutes < 60; minutes += 30) {
            const row = document.createElement('tr');
            const timeCell = document.createElement('td');
            timeCell.textContent = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            timeCell.classList.add('time-label');

            const eventCell = document.createElement('td');
            eventCell.dataset.date = date;
            eventCell.dataset.time = `${String(hour).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            eventCell.addEventListener('dblclick', () => addEventByClick(eventCell));
            eventCell.addEventListener('contextmenu', (e) => openContextMenu(e, eventCell));
            document.addEventListener('click', (e) => {
                if (modal.style.display === 'block' && !modal.contains(e.target) && e.target !== saveEventButton && e.target !== cancelEventButton) {
                    closeEventModal();
                }
            });

            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤
            if (events.plans[date] && events.plans[date][eventCell.dataset.time]) {
                events.plans[date][eventCell.dataset.time].forEach(event => {
                    const span = document.createElement('span');
                    span.textContent = event;
                    span.style.display = 'block';
                    eventCell.appendChild(span);
                });
            }

            row.appendChild(timeCell);
            row.appendChild(eventCell);
            daySchedule.appendChild(row);
        }
    }

    applyDayMode(isDayModeEnabled);
    highlightCurrentTime();
}

// === –ú–û–î–ê–õ–¨–ù–ï –í–Ü–ö–ù–û –î–õ–Ø –ü–û–î–Ü–ô ===

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
function openEventModal(cell, existingEvent = null) {
    modal.style.display = 'block';

    const { date, time } = cell.dataset;

    if (existingEvent) {
        // –Ø–∫—â–æ –ø–æ–¥—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î, –∑–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        eventTitleInput.value = existingEvent.title || '';
        eventDescriptionInput.value = existingEvent.description || '';
    } else {
        // –î–ª—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó –æ—á–∏—â—É—î–º–æ –ø–æ–ª—è
        eventTitleInput.value = '';
        eventDescriptionInput.value = '';
    }

    saveEventButton.onclick = () => {
        const title = eventTitleInput.value.trim();
        const description = eventDescriptionInput.value.trim();

        if (title) {
            if (!events.plans[date]) events.plans[date] = {};
            if (!events.plans[date][time]) events.plans[date][time] = [];
            
            // –Ø–∫—â–æ –ø–æ–¥—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î, –∑–∞–º—ñ–Ω—é—î–º–æ —ó—ó, —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—É
            if (existingEvent) {
                existingEvent.title = title;
                existingEvent.description = description;
            } else {
                events.plans[date][time].push({ title, description });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            const startDate = new Date(selectedDate);
            startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è
            createWeekSchedule(startDate);

            closeEventModal();
        }
    };

    cancelEventButton.onclick = closeEventModal;
}


// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function closeEventModal() {
    modal.style.display = 'none';
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ –∫–ª—ñ—Ç–∏–Ω–∫—É
function addEventByClick(cell) {
    const { date, time } = cell.dataset;

    if (events.plans[date] && events.plans[date][time]) {
        // –Ø–∫—â–æ —î –ø–æ–¥—ñ—è, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ—ó –ø–æ–¥—ñ—ó
        const existingEvent = events.plans[date][time][0]; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –æ–¥–Ω—É –ø–æ–¥—ñ—é –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
        openEventModal(cell, existingEvent);
    } else {
        // –Ø–∫—â–æ –ø–æ–¥—ñ—ó –Ω–µ–º–∞—î, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        openEventModal(cell);
    }
}

// === –ö–û–ù–¢–ï–ö–°–¢–ù–ï –ú–ï–ù–Æ ===

function openContextMenu(event, cell) {
    event.preventDefault(); // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
    selectedEventCell = cell; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É

    const { date, time } = cell.dataset;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–¥—ñ—ó –≤ —Ü—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    const hasEvent = events.plans[date] && events.plans[date][time] && events.plans[date][time].length > 0;

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
    document.getElementById('editEvent').style.display = hasEvent ? 'block' : 'none';
    document.getElementById('deleteEvent').style.display = hasEvent ? 'block' : 'none';

    contextMenu.style.display = 'block';
    contextMenu.style.left = `${event.pageX}px`;
    contextMenu.style.top = `${event.pageY}px`;
}

function closeContextMenu() {
    contextMenu.style.display = 'none';
    selectedEventCell = null;
}


document.addEventListener('click', (e) => {
    if (!contextMenu.contains(e.target)) {
        closeContextMenu();
    }
});


// === –î–ï–ù–ù–ò–ô –†–ï–ñ–ò–ú ===

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
function applyDayMode(enabled) {
    const rows = daySchedule.querySelectorAll('tr');
    rows.forEach(row => {
        const time = row.firstChild.textContent;
        const [hour] = time.split(':').map(Number);
        if (enabled) {
            row.style.display = (hour >= 8 && hour < 22) ? '' : 'none';
        } else {
            row.style.display = '';
        }
    });
}

const dayModeToggle = document.getElementById('dayModeToggle');
dayModeToggle.addEventListener('change', (e) => {
    isDayModeEnabled = e.target.checked;
    localStorage.setItem('dayMode', JSON.stringify(isDayModeEnabled)); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —É localStorage
    applyDayMode(isDayModeEnabled); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–µ–Ω–Ω–∏–π —Ä–µ–∂–∏–º
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
const savedDayMode = JSON.parse(localStorage.getItem('dayMode')) || false;
dayModeToggle.checked = savedDayMode; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
applyDayMode(savedDayMode); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∞–Ω –¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É

// === –ü–†–û–ö–†–£–¢–ö–ê –î–û –ü–û–¢–û–ß–ù–û–ì–û –ß–ê–°–£ ===

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É
function scrollToCurrentTime() {
    const now = new Date();
    const currentCell = document.querySelector(`td[data-date="${now.toISOString().slice(0, 10)}"][data-time="${String(now.getHours()).padStart(2, '0')}:${now.getMinutes() < 30 ? '00' : '30'}"]`);
    if (currentCell) {
        currentCell.scrollIntoView({ behavior: 'smooth', block: 'center' });
        currentCell.style.backgroundColor = 'yellow';
    }
}

// === –î–û–î–ê–í–ê–ù–ù–Ø –ü–û–î–Ü–ô ===

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
function addEvent(date, time, description, type = 'plans') {
    if (type === 'plans') {
        if (!events.plans[date]) events.plans[date] = {};
        if (!events.plans[date][time]) events.plans[date][time] = [];
        events.plans[date][time].push(description);
    } else if (type === 'holidays') {
        if (!events.holidays[date]) events.holidays[date] = [];
        events.holidays[date].push(description);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è —Ç–∏–∂–Ω—è
    const startDate = new Date(selectedDate);
    startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫)
    createWeekSchedule(startDate);
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
document.getElementById('editEvent').addEventListener('click', () => {
    if (selectedEventCell) {
        openEventModal(selectedEventCell, true); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        closeContextMenu();
    }
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
document.getElementById('deleteEvent').addEventListener('click', () => {
    if (selectedEventCell) {
        const { date, time } = selectedEventCell.dataset;

        if (events.plans[date] && events.plans[date][time]) {
            delete events.plans[date][time]; // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é
            if (Object.keys(events.plans[date]).length === 0) delete events.plans[date]; // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞—Ç—É, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—è
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
        const startDate = new Date(selectedDate);
        startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è
        createWeekSchedule(startDate);

        closeContextMenu();
    }
});

// –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–¥—ñ—ó
function highlightCurrentTime() {
    const now = getDateInTimezone(new Date(), userTimezone);
    const currentDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
    const currentTime = `${String(now.getHours()).padStart(2, '0')}:${now.getMinutes() < 30 ? '00' : '30'}`;
    const currentCell = document.querySelector(`td[data-date="${currentDate}"][data-time="${currentTime}"]`);

    if (currentCell) {
        currentCell.style.backgroundColor = 'yellow';
    }
}


function getDateInTimezone(date, timezone) {
    return new Date(
        new Date(date).toLocaleString('en-US', { timeZone: timezone })
    );
}

function loadTimezones() {
    const timezoneSelector = document.getElementById('timezoneSelector');
    const timezones = Intl.supportedValuesOf('timeZone'); // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —á–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏
    
    timezones.forEach(tz => {
        const option = document.createElement('option');
        option.value = tz;
        option.textContent = tz;
        if (tz === userTimezone) option.selected = true;
        timezoneSelector.appendChild(option);
    });

    timezoneSelector.addEventListener('change', (e) => {
        userTimezone = e.target.value;
        localStorage.setItem('userTimezone', userTimezone); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        createMonthCalendar(); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
    });
}

function handleDragStart(e, cell) {
    const { date, time } = cell.dataset;

    if (events.plans[date] && events.plans[date][time]) {
        draggedEvent = {
            date,
            time,
            event: events.plans[date][time][0], // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –æ–¥–Ω—É –ø–æ–¥—ñ—é
        };
        e.dataTransfer.setData('text/plain', JSON.stringify(draggedEvent));
    }
}

// –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
function handleDragOver(e) {
    e.preventDefault();
}

// –ö—ñ–Ω—Ü–µ–≤–∏–π –ø—É–Ω–∫—Ç –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
function handleDrop(e, cell) {
    e.preventDefault();
    const { date, time } = cell.dataset;

    if (draggedEvent) {
        if (events.plans[date] && events.plans[date][time]) {
            // –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
            openConflictModal(cell, draggedEvent);
        } else {
            // –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø–æ–¥—ñ—é
            transferEvent(draggedEvent, date, time);
        }
        draggedEvent = null; // –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    }
}


function openConflictModal(targetCell, draggedEvent) {
    const conflictModal = document.getElementById('conflictModal'); // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    conflictModal.style.display = 'block';

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–ª—å–æ–≤—É –∫–æ–º—ñ—Ä–∫—É
    const { date: targetDate, time: targetTime } = targetCell.dataset;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—é –≤ —Ü—ñ–ª—å–æ–≤—ñ–π –∫–æ–º—ñ—Ä—Ü—ñ
    const existingEvent = events.plans[targetDate] && events.plans[targetDate][targetTime] 
        ? { 
            date: targetDate, 
            time: targetTime, 
            event: events.plans[targetDate][targetTime][0] // –ü–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è –æ–¥–Ω–∞ –ø–æ–¥—ñ—è
          } 
        : null;

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
    document.getElementById('replaceEvent').onclick = () => {
        // –ó–∞–º—ñ–Ω–∞ –ø–æ–¥—ñ—ó
        if (existingEvent) {
            delete events.plans[existingEvent.date][existingEvent.time]; // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –ø–æ–¥—ñ—é
        }
        transferEvent(draggedEvent, targetDate, targetTime); // –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –Ω–æ–≤—É –ø–æ–¥—ñ—é
        closeConflictModal();
    };

    document.getElementById('cancelMove').onclick = () => {
        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–Ω–æ—Å—É
        closeConflictModal();
    };

    document.getElementById('swapEvents').onclick = () => {
        if (existingEvent) {
            // –ü–æ–º—ñ–Ω—è—Ç–∏ –ø–æ–¥—ñ—ó –º—ñ—Å—Ü—è–º–∏
            transferEvent(existingEvent, draggedEvent.date, draggedEvent.time); // –°—Ç–∞—Ä—É –ø–æ–¥—ñ—é –ø–µ—Ä–µ–º—ñ—â–∞—î–º–æ —É —Å—Ç–∞—Ä—É –∫–æ–º—ñ—Ä–∫—É
            transferEvent(draggedEvent, targetDate, targetTime); // –ü–µ—Ä–µ—Ç—è–≥–Ω—É—Ç—É –ø–æ–¥—ñ—é –ø–µ—Ä–µ–º—ñ—â–∞—î–º–æ —É –Ω–æ–≤—É –∫–æ–º—ñ—Ä–∫—É
        }
        closeConflictModal();
    };
}


function transferEvent(event, newDate, newTime) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–¥—ñ—è —ñ—Å–Ω—É—î
    if (!event || !event.event) {
        console.error("–ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É:", event);
        return;
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –º—ñ—Å—Ü—è
    if (events.plans[event.date] && events.plans[event.date][event.time]) {
        delete events.plans[event.date][event.time];
        if (Object.keys(events.plans[event.date]).length === 0) {
            delete events.plans[event.date]; // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –¥–∞—Ç—É
        }
    }

    // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –Ω–∞ –Ω–æ–≤–µ –º—ñ—Å—Ü–µ
    if (!events.plans[newDate]) events.plans[newDate] = {};
    if (!events.plans[newDate][newTime]) events.plans[newDate][newTime] = [];
    events.plans[newDate][newTime].push(event.event);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
    const startDate = new Date(selectedDate);
    startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è
    createWeekSchedule(startDate);
}


function closeConflictModal() {
    const conflictModal = document.getElementById('conflictModal');
    conflictModal.style.display = 'none';
}

function transferEvent(event, newDate, newTime) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –º—ñ—Å—Ü—è
    delete events.plans[event.date][event.time];
    if (Object.keys(events.plans[event.date]).length === 0) {
        delete events.plans[event.date];
    }

    // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –Ω–∞ –Ω–æ–≤–µ –º—ñ—Å—Ü–µ
    if (!events.plans[newDate]) events.plans[newDate] = {};
    if (!events.plans[newDate][newTime]) events.plans[newDate][newTime] = [];
    events.plans[newDate][newTime].push(event.event);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
    const startDate = new Date(selectedDate);
    startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è
    createWeekSchedule(startDate);
}



// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

prevMonthButton.addEventListener('click', prevMonth);
nextMonthButton.addEventListener('click', nextMonth);
loadTimezones();
createMonthCalendar();
scrollToCurrentTime();

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.style.display === 'block') {
        closeEventModal();
    }
});

document.addEventListener('click', (e) => {
    if (modal.style.display === 'block' && !modal.contains(e.target)) {
        closeEventModal();
    }
});